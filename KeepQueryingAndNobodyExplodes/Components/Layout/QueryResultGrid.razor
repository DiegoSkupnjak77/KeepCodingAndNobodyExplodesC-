@using System.Data
<RadzenDataGrid @ref="grid" Data="@data" TItem="IDictionary<string, object>" ColumnWidth="200px">
    <Columns>
        @foreach (var column in columns)
        {
            <RadzenDataGridColumn TItem="IDictionary<string, object>" Title="@column.Key" Type="column.Value"
                                  Property="@GetColumnPropertyExpression(column.Key, column.Value)">
                <Template>
                    @ReturnValue(context, column.Key)
                </Template>
            </RadzenDataGridColumn>
        }
    </Columns>
</RadzenDataGrid>

@code {
    public List<IDictionary<string, object>> data { get; set; } = new();
    RadzenDataGrid<IDictionary<string, object>> grid;
    public IDictionary<string, Type> columns { get; set; } = new Dictionary<string, Type>();

    private string GetColumnPropertyExpression(string name, Type type)
    {
        var expression = $@"it[""{name}""].ToString()";

        if (type == typeof(int))
        {
            return $"int.Parse({expression})";
        }
        else if (type == typeof(DateTime))
        {
            return $"DateTime.Parse({expression})";
        }

        return expression;
    }

    public async Task PopulateGridAsync(DataTable table)
    {
        data = new();
        columns = new Dictionary<string, Type>();

        foreach (DataColumn column in table.Columns)
        {
            columns.Add(column.ColumnName, column.DataType);
        }

        foreach (DataRow row in table.Rows)
        {
            var rowDictionary = new Dictionary<string, object>();

            foreach (DataColumn column in table.Columns)
            {
                rowDictionary.Add(column.ColumnName, row[column]);
            }

            data.Add(rowDictionary);
        }
        grid.ColumnsCollection.Clear();      
        grid.Reset();
        await grid.RefreshDataAsync();
        await grid.Reload();
        this.StateHasChanged();
    }


    private object ReturnValue(IDictionary<string, object> context, string key)
    {   object result;
        return context.TryGetValue(key, out result) ? result : "";
    }
}
